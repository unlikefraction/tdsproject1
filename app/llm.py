import os
import requests

# Constants for AI Proxy
AI_PROXY_URL = "https://aiproxy.sanand.workers.dev/openai/v1"
AIPROXY_TOKEN = os.environ.get("AIPROXY_TOKEN")

if not AIPROXY_TOKEN:
    raise ValueError("AIPROXY_TOKEN environment variable not set.")

def generate_chat_completion(prompt: str, model: str = "gpt-4o-mini") -> str:
    """
    Generate a response from the LLM using the AI Proxy's chat completion endpoint.
    
    Args:
        prompt (str): The prompt to send to the LLM.
        model (str): The model to use for completion (default is "gpt-4o-mini").
    
    Returns:
        str: The response generated by the LLM.
    """
    url = f"{AI_PROXY_URL}/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {AIPROXY_TOKEN}"
    }
    payload = {
        "model": model,
        "messages": [{"role": "user", "content": prompt}]
    }

    response = requests.post(url, json=payload, headers=headers)

    if response.status_code != 200:
        raise Exception(f"Error from AI Proxy: {response.status_code} - {response.text}")

    result = response.json()
    return result["choices"][0]["message"]["content"]

def generate_embeddings(texts: list[str], model: str = "text-embedding-3-small") -> list[list[float]]:
    """
    Generate embeddings for a list of texts using the AI Proxy's embedding endpoint.
    
    Args:
        texts (list[str]): List of texts to embed.
        model (str): The model to use for embeddings (default is "text-embedding-3-small").
    
    Returns:
        list[list[float]]: List of embeddings for each input text.
    """
    url = f"{AI_PROXY_URL}/embeddings"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {AIPROXY_TOKEN}"
    }
    payload = {
        "model": model,
        "input": texts
    }

    response = requests.post(url, json=payload, headers=headers)

    if response.status_code != 200:
        raise Exception(f"Error from AI Proxy: {response.status_code} - {response.text}")

    result = response.json()
    return [embedding["embedding"] for embedding in result["data"]]
